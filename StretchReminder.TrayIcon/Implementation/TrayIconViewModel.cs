using GalaSoft.MvvmLight;
using GalaSoft.MvvmLight.Command;
using StretchReminder.TrayIcon.Core;
using System;
using System.Windows;
using System.Windows.Forms;
using System.Windows.Input;

namespace StretchReminder.TrayIcon.Implementation
{
    public class TrayIconViewModel : ViewModelBase
    {
        private RelayCommand _stateChangedCommand;
        public ICommand StateChangedCommand => _stateChangedCommand;

        private RelayCommand _closingCommand;
        public ICommand ClosingCommand => _closingCommand;

        private WindowState _windowState;
        public WindowState WindowState
        {
            get
            {
                return _windowState;
            }
            set
            {
                _windowState = value;
                RaisePropertyChanged();
            }
        }

        // icon show in the tray area
        private NotifyIcon _notifyIcon;
        // holds the data generated by the supporting service
        private IIconInfo _notifyIconInfo;
        // last state of the application
        private WindowState _storedWindowState = WindowState.Normal;
        // service used to define the icon behavior
        private ITrayIconService _trayIconService;

        public TrayIconViewModel(ITrayIconService trayIconService)
        {
            _trayIconService = trayIconService;

            // initialize commands
            _stateChangedCommand = new RelayCommand(OnStateChanged);
            _closingCommand = new RelayCommand(OnClose);

            InitializeIcon();
        }

        private void InitializeIcon()
        {
            // get icon info
            _notifyIconInfo = _trayIconService.GetIconInfo();

            // initialize code here
            _notifyIcon = new NotifyIcon();
            _notifyIcon.Text = _notifyIconInfo.Title;
            _notifyIcon.Icon = _notifyIconInfo.Icon;
            _notifyIcon.Click += new EventHandler(NotifyIcon_Click);

            if (_notifyIconInfo.ShowBaloonTip)
            {
                _notifyIcon.BalloonTipText = _notifyIconInfo.BalloonTipText;
                _notifyIcon.BalloonTipTitle = _notifyIconInfo.Title;
            }
        }

        private void OnStateChanged()
        {
            if (WindowState == WindowState.Minimized)
            {
                // notify to hide the application
                _trayIconService.HideApp();

                // show the tray icon
                ShowTrayIcon(true);

                // notify user that the application is in the tray
                if (_notifyIconInfo.ShowBaloonTip)
                {
                    _notifyIcon?.ShowBalloonTip(2000);
                }
            }
            else
            {
                _storedWindowState = WindowState;
            }
        }

        private void NotifyIcon_Click(object sender, EventArgs e)
        {
            // hide the tray icon
            ShowTrayIcon(false);

            // notify to show the application
            _trayIconService.ShowApp();
            // restore previous state
            WindowState = _storedWindowState;
        }

        private void ShowTrayIcon(bool show)
        {
            if (_notifyIcon != null)
            {
                _notifyIcon.Visible = show;
            }
        }

        private void OnClose()
        {
            _notifyIcon?.Dispose();
            _notifyIcon = null;
        }
    }
}
